import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import styles from "./WaitingEntertainment.module.css";

const entries = [
  { quote: "‚ÄúVi·∫øt vƒÉn l√† h√†nh tr√¨nh t·ª± hi·ªÉu m√¨nh.‚Äù", emoji: "üß†", author: "ChatGPT 1990 B·∫£n C≈©", theme: "./quote0.jpeg" },
  { quote: "‚ÄúNg·ªìi ch·ªù AI m√† kh√¥ng chill l√† d·ªü.‚Äù", emoji: "‚òï", author: "Gemini B·∫£n ·ªîn ƒê·ªãnh", theme: "./quote1.jpeg" },
  { quote: "‚Äúƒê·ªùi nh∆∞ vƒÉn h·ªçc, ch·ªâ kh√°c l√† √≠t happy ending.‚Äù", emoji: "üìñ", author: "Siri 5.1 T√≠ch H·ª£p", theme: "./quote2.jpeg" },
  { quote: "‚Äúƒê·ª£i ch√∫t nha, video ƒëang ƒë∆∞·ª£c n·∫•u b·∫±ng deep learning.‚Äù", emoji: "üç≥", author: "GPT-4 Plus Pro Max", theme: "./quote3.jpeg" },
  { quote: "‚Äúƒê·ªçc vƒÉn h·ªçc gi√∫p ta th√¥ng minh h∆°n.‚Äù", emoji: "üìö", author: "Bing AI Th·∫ßn Th√°nh", theme: "./quote4.jpeg" },
  { quote: "‚ÄúAI ƒëang suy nghƒ© thay b·∫°n... nh∆∞ng crush b·∫°n l·∫°i nghƒ© v·ªÅ ng∆∞·ªùi kh√°c.‚Äù", emoji: "ü§ñüíî", author: "DeepMind Ultra Gen 7", theme: "./quote5.jpeg" },
  { quote: "‚ÄúL√™n level AI l√† ƒëi l√™n t·∫ßng th∆∞·ª£ng.‚Äù", emoji: "üïπÔ∏è", author: "Claude Pro Max B·∫£n ƒê·∫∑c Bi·ªát", theme: "./quote6.jpeg" },
  { quote: "‚ÄúKh√¥ng c√≥ g√¨ kh√≥, ch·ªâ c√≥ ƒëi·ªÅu kh√¥ng d·ªÖ‚Äù", emoji: "üí°", author: "Cortana 2.0 Phi√™n B·∫£n R√°p L·∫°i", theme: "./quote7.jpeg" },
  { quote: "‚ÄúMu·ªën gi·ªèi, ph·∫£i t√¨m ƒë·∫øn AI?‚Äù", emoji: "üíª", author: "Bing AI K·ªπ Thu·∫≠t Cao C·∫•p", theme: "./quote8.jpeg" },
  { quote: "‚ÄúTh·ªùi ƒë·∫°i n√†y kh√¥ng AI kh√¥ng th·ªÉ s·ªëng n·ªïi.‚Äù", emoji: "‚ö°", author: "Assistant 9999 Ultra", theme: "./quote9.jpeg" }
];

function formatTime(seconds: number) {
  const m = String(Math.floor(seconds / 60)).padStart(2, "0");
  const s = String(seconds % 60).padStart(2, "0");
  return `${m}:${s}`;
}

export default function WaitingEntertainment() {
  const [time, setTime] = useState(0);
  const [entry, setEntry] = useState(entries[0]);

  useEffect(() => {
    const timer = setInterval(() => setTime(t => t + 1), 1000);
    const quoteTimer = setInterval(() => {
      const random = entries[Math.floor(Math.random() * entries.length)];
      setEntry(random);
    }, 10000);

    return () => {
      clearInterval(timer);
      clearInterval(quoteTimer);
    };
  }, []);

  const backgroundImage = `url(${entry.theme})`;

  return (
    <motion.div 
      className={styles.container}
      style={{ backgroundImage }}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <motion.div
        className={styles.emoji}
        key={entry.emoji}
        initial={{ y: -10, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.3 }}
      >
        {entry.emoji}
      </motion.div>
      <p className={styles.quote}>{entry.quote}</p>
      <p className={styles.time}>‚è≥ ƒê√£ ch·ªù: {formatTime(time)}</p>
      <div className={styles.author}>- {entry.author} -</div>
    </motion.div>
  );
}
